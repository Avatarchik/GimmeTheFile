buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.21.4'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

def APP_NAME = "Gimme The File"

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.drivfe.gimmethefile"
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 1
        versionName "0.1"

        resValue "string", "app_name", APP_NAME
        try {
            Properties props = new Properties()
            props.load(new FileInputStream("app.properties"))
            buildConfigField("String", "BASE_URL", props.getProperty("BASE_URL"))
        } catch(Exception e) {
            throw new Exception("You need to define 'BASE_URL' in app.properties in the root directory.") 
        }
    }

    signingConfigs {
        release {
            if (rootProject.file("keystore.properties").exists()) {
                def props = new Properties()
                props.load(new FileInputStream(rootProject.file('keystore.properties')))

                storeFile = file(props['storeFile'])
                storePassword = props['storePassword']
                keyAlias = props['keyAlias']
                keyPassword = props['keyPassword']
            } else {
                throw new InvalidUserDataException("You should define 'storePassword' and 'keyPassword' in keystore.properties.")
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            resValue "string", "app_name", "GTF-debug"
            debuggable true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (rootProject.file("keystore.properties").exists())
                signingConfig signingConfigs.release
        }
    }
    
    lintOptions {
        abortOnError false
    }
    
    dexOptions {
        preDexLibraries false
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = file(new File("apks/${APP_NAME}.${output.name}-v${android.defaultConfig.versionName}.apk"))
        }
    }
}

def final SUPPORT_VERSION = '23.3.0'

dependencies {
    compile "com.android.support:appcompat-v7:$SUPPORT_VERSION"
    compile "com.android.support:design:$SUPPORT_VERSION"
    compile "com.android.support:cardview-v7:$SUPPORT_VERSION"
    compile "com.google.code.gson:gson:2.6"
    compile "com.squareup.okhttp3:okhttp:3.2.0"
    compile "com.jakewharton:butterknife:7.0.1"
    compile "com.squareup.picasso:picasso:2.5.2"
    compile "com.jakewharton.timber:timber:4.1.2"
    compile "io.reactivex:rxandroid:1.1.0"
    compile "io.reactivex:rxjava:1.1.3"
    compile "com.github.medyo:android-about-page:1.0.2"
    compile "com.tbruyelle.rxpermissions:rxpermissions:0.7.0@aar"
    compile("com.github.afollestad.material-dialogs:core:0.8.5.7@aar") {
        transitive = true
    }
    compile("com.github.afollestad.material-dialogs:commons:0.8.5.7@aar") {
        transitive = true
    }
    compile("com.crashlytics.sdk.android:crashlytics:2.5.5@aar") {
        transitive = true;
    }
}